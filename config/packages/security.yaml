security:
    enable_authenticator_manager: true
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\Core\User:
            algorithm: auto
    providers:
        app_user_provider:
            entity:
                class: App\Entity\Core\User
                property: email
        shib_users:
            id: shibbundle.sup_service
        shib_admins:
            id: shibbundle.admin_sup_service

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            host: '%env(resolve:back_host)%'
            lazy: true
            provider: shib_admins
            guard:
                authenticators:
                    - admin_shibboleth_authenticator
            anonymous: false
            security: true
            logout:
                path: app_logout
                target: '/Shibboleth.sso/Logout'

            front:
                host: '%env(resolve:front_host)%'
                pattern: ^/api/shibboleth|^/account|^/program|^/training/inscription
                provider: shib_users
                guard:
                    authenticators:
                        - shibboleth_authenticator
                anonymous: false
                security: true
                logout:
                    path: front.account.logout
                    target: '/Shibboleth.sso/Logout'


            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # Back
        # Front
        - { path: ^/account, roles: ROLE_SHIB_AUTHENTICATED }
        - { path: ^/program, roles: ROLE_SHIB_AUTHENTICATED }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
