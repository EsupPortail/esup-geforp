{
  "_args": [
    [
      {
        "raw": "angular-loading-bar@https://registry.npmjs.org/angular-loading-bar/-/angular-loading-bar-0.3.0.tgz",
        "scope": null,
        "escapedName": "angular-loading-bar",
        "name": "angular-loading-bar",
        "rawSpec": "https://registry.npmjs.org/angular-loading-bar/-/angular-loading-bar-0.3.0.tgz",
        "spec": "https://registry.npmjs.org/angular-loading-bar/-/angular-loading-bar-0.3.0.tgz",
        "type": "remote"
      },
      "/var/www/sygefor"
    ]
  ],
  "_from": "angular-loading-bar@>=0.3.0 <0.4.0",
  "_id": "angular-loading-bar@0.3.0",
  "_inCache": true,
  "_location": "/angular-loading-bar",
  "_phantomChildren": {},
  "_requested": {
    "raw": "angular-loading-bar@https://registry.npmjs.org/angular-loading-bar/-/angular-loading-bar-0.3.0.tgz",
    "scope": null,
    "escapedName": "angular-loading-bar",
    "name": "angular-loading-bar",
    "rawSpec": "https://registry.npmjs.org/angular-loading-bar/-/angular-loading-bar-0.3.0.tgz",
    "spec": "https://registry.npmjs.org/angular-loading-bar/-/angular-loading-bar-0.3.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/angular-loading-bar/-/angular-loading-bar-0.3.0.tgz",
  "_shasum": "4fe8e8f1ac225a9eb886bb4d75d364b8c5e3ff56",
  "_shrinkwrap": null,
  "_spec": "angular-loading-bar@https://registry.npmjs.org/angular-loading-bar/-/angular-loading-bar-0.3.0.tgz",
  "_where": "/var/www/sygefor",
  "author": {
    "name": "Wes Cruver"
  },
  "bugs": {
    "url": "https://github.com/chieffancypants/angular-loading-bar/issues"
  },
  "dependencies": {},
  "description": "An automatic loading bar for AngularJS",
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-contrib-concat": "~0.3.0",
    "grunt-contrib-cssmin": "~0.6.1",
    "grunt-contrib-jshint": "~0.6.4",
    "grunt-contrib-uglify": "~0.2.4",
    "grunt-karma": "~0.6.2",
    "karma": "~0.10.2",
    "karma-chrome-launcher": "~0.1.0",
    "karma-coffee-preprocessor": "~0.1.0",
    "karma-coverage": "~0.1.0",
    "karma-firefox-launcher": "~0.1.0",
    "karma-html2js-preprocessor": "~0.1.0",
    "karma-jasmine": "~0.1.3",
    "karma-phantomjs-launcher": "~0.1.0",
    "karma-requirejs": "~0.1.0",
    "karma-script-launcher": "~0.1.0"
  },
  "directories": {
    "example": "example",
    "test": "test"
  },
  "homepage": "https://chieffancypants.github.io/angular-loading-bar",
  "keywords": [
    "angular",
    "angularjs",
    "loading",
    "loadingbar",
    "progress",
    "progressbar"
  ],
  "license": "MIT",
  "main": "src/loading-bar.js",
  "name": "angular-loading-bar",
  "optionalDependencies": {},
  "readme": "angular-loading-bar\n===================\n\nThe idea is simple: Add a loading bar / progress bar whenever an XHR request goes out in angular.  Multiple requests within the same time period get bundled together such that each response increments the progress bar by the appropriate amount.\n\nThis is mostly cool because you simply include it in your app, and it works.  There's no complicated setup, and no need to maintain the state of the loading bar; it's all handled automatically by the interceptor.\n\n**Requirements:** AngularJS 1.2+\n\n\n## Usage:\n\n1. include the loading bar as a dependency for your app.  If you want animations, include `ngAnimate` as well.\n\n    ```js\n    angular.module('myApp', ['chieffancypants.loadingBar', 'ngAnimate'])\n    ```\n    \n2. include the supplied CSS file (or create your own).\n3. That's it -- you're done!\n\n#### via bower:\n```\n$ bower install angular-loading-bar\n```\n#### via npm:\n```\n$ npm install angular-loading-bar\n```\n\n\n## Why I created this\nThere are a couple projects similar to this out there, but none were ideal for me.  All implementations I've seen require that you maintain state on behalf of the loading bar.  In other words, you're setting the value of the loading/progress bar manually from potentially many different locations.  This becomes complicated when you have a very large application with several services all making independant XHR requests. It becomes even more complicated if you want these services to be loosly coupled.\n\nAdditionally, Angular was created as a highly testable framework, so it pains me to see Angular modules without tests.  That is not the case here as this loading bar ships with 100% code coverage.\n\n\n**Goals for this project:**\n\n1. Make it automatic\n2. Unit tests, 100% coverage\n3. Must work well with ngAnimate\n4. Must be styled via external CSS (not inline)\n5. No jQuery dependencies\n\n\n## Configuration\n\n**Turn the spinner on or off:**  \nThe insertion of the spinner can be controlled through configuration.  It's on by default, but if you'd like to turn it off, simply configure the service:\n\n```js\nangular.module('myApp', ['chieffancypants.loadingBar'])\n  .config(function(cfpLoadingBarProvider) {\n    cfpLoadingBarProvider.includeSpinner = false;\n  })\n```\n\n**Turn the loading bar on or off:**  \nLike the spinner configuration above, the loading bar can also be turned off for cases where you only want the spinner:\n\n```js\nangular.module('myApp', ['chieffancypants.loadingBar'])\n  .config(function(cfpLoadingBarProvider) {\n    cfpLoadingBarProvider.includeBar = false;\n  })\n```\n\n**Ignoring particular XHR requests:**  \nThe loading bar can also be forced to ignore certain requests, for example, when long-polling or periodically sending debugging information back to the server.\n\n```js\n// ignore particular $http requests:\n$http.get('/status', {\n  ignoreLoadingBar: true\n});\n\n```\n\n\n```js\n// ignore particular $resource requests:\n.factory('Restaurant', function($resource) {\n  return $resource('/api/restaurant/:id', {id: '@id'}, {\n    query: {\n      method: 'GET',\n      isArray: true,\n      ignoreLoadingBar: true\n    }\n  });\n});\n\n```\n\n\n\n\n## How it works:\nThis library is split into two components, an $http `interceptor`, and a `service`:\n\n**Interceptor**  \nThe interceptor simply listens for all outgoing XHR requests, and then instructs the loadingBar service to start, stop, and increment accordingly.  There is no public API for the interceptor.\n\n**Service**  \nThe service is responsible for the presentation of the loading bar.  It injects the loading bar into the DOM, adjusts the width whenever `set()` is called, and `complete()`s the whole show by removing the loading bar from the DOM.\n\n## Service API (advanced usage)\nUnder normal circumstances you won't need to use this.  However, if you wish to use the loading bar without the interceptor, you can do that as well.  Simply include the loading bar service as a dependency instead of the interceptor in your angular module:\n\n```js\nangular.module('myApp', ['cfpLoadingBar'])\n```\n\n\n```js\n\ncfpLoadingBar.start();\n// will insert the loading bar into the DOM, and display its progress at 1%.\n// It will automatically call `inc()` repeatedly to give the illusion that the page load is progressing.\n\ncfpLoadingBar.inc();\n// increments the loading bar by a random amount.\n// It is important to note that the auto incrementing will begin to slow down as\n// the progress increases.  This is to prevent the loading bar from appearing\n// completed (or almost complete) before the XHR request has responded. \n\ncfpLoadingBar.set(0.3) // Set the loading bar to 30%\ncfpLoadingBar.status() // Returns the loading bar's progress.\n// -> 0.3\n\ncfpLoadingBar.complete()\n// Set the loading bar's progress to 100%, and then remove it from the DOM.\n\n```\n\n## Credits: \nCredit goes to [rstacruz](https://github.com/rstacruz) for his excellent [nProgress](https://github.com/rstacruz/nprogress).\n\n## License:\nLicensed under the MIT license\n\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/chieffancypants/angular-loading-bar/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/chieffancypants/angular-loading-bar.git"
  },
  "version": "0.3.0"
}
